import asyncio
import logging
import signal
import sys
import time
from datetime import datetime
from typing import Optional
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.enums import ChatAction
from main import VineyardAssistant
from config import bot_token

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_logs.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class VineyardBot:
    def __init__(self):
        self.bot = Bot(token=bot_token)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.assistant: Optional[VineyardAssistant] = None
        self.cache = {}
        self.setup_handlers()
        self.is_running = True

    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = (signal.SIGINT, signal.SIGTERM)
        for sig in signals:
            signal.signal(sig, self.handle_shutdown)
            logger.info(f"Registered handler for signal {sig}")

    def handle_shutdown(self, signum, _):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"Received signal {signum}. Starting shutdown process...")
        self.is_running = False
        asyncio.create_task(self.shutdown())

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            logger.info("Shutting down bot...")
            await self.bot.session.close()
            await self.dp.storage.close()
            logger.info("Bot shutdown completed")
            sys.exit(0)
        except Exception as shutdown_error:
            logger.error(f"Error during shutdown: {shutdown_error}")
            sys.exit(1)

    async def initialize_assistant(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        if self.assistant is None:
            self.assistant = VineyardAssistant()
        return self.assistant

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.dp.message.register(self.cmd_start, Command('start'))
        self.dp.message.register(self.cmd_help, Command('help'))
        self.dp.message.register(self.cmd_exit, Command('exit'))
        self.dp.message.register(self.handle_message)

    @staticmethod
    async def send_long_message(message: types.Message, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç—è–º"""
        max_length = 4000
        parts = []

        while text:
            if len(text) <= max_length:
                parts.append(text)
                break

            part = text[:max_length]
            last_period = part.rfind('.')
            if last_period != -1:
                part = text[:last_period + 1]
                text = text[last_period + 1:].lstrip()
            else:
                text = text[max_length:]
            parts.append(part)

        for part in parts:
            await message.answer(part.strip())
            await asyncio.sleep(0.3)

    @staticmethod
    async def cmd_start(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–∞–≥—Ä–æ–Ω–æ–º –ø–æ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞—Ä—Å—Ç–≤—É –∫–æ–º–ø–∞–Ω–∏–∏ Ceres Pro.\n"
            "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –í–∞–º –ø–æ–º–æ—á—å.\n\n"
            "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
        )
        await message.answer(welcome_text)
        logger.info(f"User {message.from_user.id} started conversation")

    @staticmethod
    async def cmd_help(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üçá –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ:\n"
            "- –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞\n"
            "- —É—Ö–æ–¥–µ –∑–∞ –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω–æ–π –ª–æ–∑–æ–π\n"
            "- —Å–æ—Ä—Ç–∞—Ö –≤–∏–Ω–æ–≥—Ä–∞–¥–∞\n"
            "- –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç –±–æ–ª–µ–∑–Ω–µ–π –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π\n"
            "- –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º\n\n"
            "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exit"
        )
        await message.answer(help_text)

    @staticmethod
    async def cmd_exit(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /exit"""
        farewell_text = (
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∞-–∞–≥—Ä–æ–Ω–æ–º–∞. –£–¥–∞—á–∏ –≤ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞—Ä—Å—Ç–≤–µ!\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        await message.answer(farewell_text)
        logger.info(f"User {message.from_user.id} ended conversation")

    async def get_cached_response(self, query: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –∫—ç—à–∞"""
        if query in self.cache:
            timestamp, response = self.cache[query]
            if (datetime.now() - timestamp).total_seconds() < 3600:
                return response
        return None

    async def cache_response(self, query: str, response: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫—ç—à"""
        self.cache[query] = (datetime.now(), response)

    async def handle_message(self, message: types.Message):
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        logger.info(f"Processing query: {message.text}")

        start_time = time.time()
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cached_response = await self.get_cached_response(message.text)
            if cached_response:
                await self.send_long_message(message, cached_response)
                await message.answer("\n–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit")

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processing_time = time.time() - start_time
                logger.info(f"Cached query processed in {processing_time:.2f} seconds for user {message.from_user.id}")
                return

            await self.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            assistant = await self.initialize_assistant()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            response = await assistant.process_query(message.text)

            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            await self.cache_response(message.text, response)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await self.send_long_message(message, response)

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–º–∞–Ω–¥–µ –≤—ã—Ö–æ–¥–∞
            await message.answer("\n–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit")

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_time = time.time() - start_time
            logger.info(f"Query processed in {processing_time:.2f} seconds for user {message.from_user.id}")

        except Exception as message_error:
            error_message = (
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."
            )
            await message.answer(error_message)
            logger.error(f"Error processing message from user {message.from_user.id}: {str(message_error)}", exc_info=True)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.setup_signal_handlers()
            logger.info('Bot started')
            await self.dp.start_polling(self.bot)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ await
        except Exception as err:
            logger.error(f"Error starting bot: {str(err)}", exc_info=True)
        finally:
            await self.shutdown()

# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞
if __name__ == '__main__':
    vineyard_bot = VineyardBot()
    try:
        asyncio.run(vineyard_bot.start())
    except KeyboardInterrupt:
        logger.info("Received KeyboardInterrupt, shutting down...")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")