import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.enums import ChatAction
from main import VineyardAssistant
from config import bot_token



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
assistant = VineyardAssistant()


@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    welcome_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–∞–≥—Ä–æ–Ω–æ–º –ø–æ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞—Ä—Å—Ç–≤—É.\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.\n"
        "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
    )
    await message.answer(welcome_text)


@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    help_text = (
        "üçá –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ:\n"
        "- –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞\n"
        "- —É—Ö–æ–¥–µ –∑–∞ –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω–æ–π –ª–æ–∑–æ–π\n"
        "- —Å–æ—Ä—Ç–∞—Ö –≤–∏–Ω–æ–≥—Ä–∞–¥–∞\n"
        "- –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç –±–æ–ª–µ–∑–Ω–µ–π –∏ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π\n"
        "- –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º\n\n"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exit"
    )
    await message.answer(help_text)


@dp.message(Command('exit'))
async def cmd_exit(message: types.Message):
    farewell_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∞-–∞–≥—Ä–æ–Ω–æ–º–∞. –£–¥–∞—á–∏ –≤ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞—Ä—Å—Ç–≤–µ!\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    await message.answer(farewell_text)


@dp.message()
async def handle_message(message: types.Message):
    try:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤—ã—Ö–æ–¥–∞
        if message.text.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
            await cmd_exit(message)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        response = await asyncio.to_thread(
            assistant.process_query,
            message.text
        )

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
        if len(response) > 4000:
            parts = [response[i:i + 4000] for i in range(0, len(response), 4000)]
            for part in parts:
                await message.answer(part)
        else:
            await message.answer(response)

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await message.answer(
            "\n–û—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã? –ó–∞–¥–∞–≤–∞–π—Ç–µ! "
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit"
        )

    except Exception as e:
        error_message = (
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."
        )
        await message.answer(error_message)
        logging.error(f"Error in message handler: {e}", exc_info=True)


async def main():
    # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logging.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')