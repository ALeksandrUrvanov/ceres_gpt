import asyncio
import logging
import signal
import sys
import time
from datetime import datetime
from typing import Optional
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.enums import ChatAction
from aiogram.types import BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from main import VineyardAssistant
from config import bot_token

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_logs.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class VineyardBot:
    def __init__(self):
        self.bot = Bot(token=bot_token)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.assistant: Optional[VineyardAssistant] = None
        self.cache = {}
        self.is_running = True
        self.setup_handlers()

    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = (signal.SIGINT, signal.SIGTERM)
        for sig in signals:
            signal.signal(sig, self.handle_shutdown)
            logger.info(f"Registered handler for signal {sig}")

    def handle_shutdown(self, signum, _):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"Received signal {signum}. Starting shutdown process...")
        self.is_running = False
        asyncio.create_task(self.shutdown())

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            logger.info("Shutting down bot...")
            await self.bot.session.close()
            await self.dp.storage.close()
            logger.info("Bot shutdown completed")
            sys.exit(0)
        except Exception as shutdown_error:
            logger.error(f"Error during shutdown: {shutdown_error}")
            sys.exit(1)

    async def setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
            BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="clear", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
            BotCommand(command="exit", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
        ]
        await self.bot.set_my_commands(commands)

    async def initialize_assistant(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        if self.assistant is None:
            self.assistant = VineyardAssistant()
        return self.assistant

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.dp.message.register(self.cmd_start, Command('start'))
        self.dp.message.register(self.cmd_menu, Command('menu'))
        self.dp.message.register(self.cmd_clear, Command('clear'))
        self.dp.message.register(self.cmd_exit, Command('exit'))
        self.dp.message.register(self.handle_message)
        self.dp.callback_query.register(self.handle_callback)

    @staticmethod
    def get_main_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –º–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about_company"),
                InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")
            ],
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
                InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="exit")
            ]
        ])
        return keyboard

    @staticmethod
    async def send_long_message(message: types.Message, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç—è–º"""
        max_length = 4000
        parts = []

        while text:
            if len(text) <= max_length:
                parts.append(text)
                break

            part = text[:max_length]
            last_period = part.rfind('.')
            if last_period != -1:
                part = text[:last_period + 1]
                text = text[last_period + 1:].lstrip()
            else:
                text = text[max_length:]
            parts.append(part)

        for part in parts:
            await message.answer(part.strip())
            await asyncio.sleep(0.3)

    async def handle_callback(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –º–µ–Ω—é"""
        data = callback_query.data
        if data == "about_company":
            await self.cmd_about_company(callback_query.message)
        elif data == "clear_history":
            await self.cmd_clear(callback_query.message)
        elif data == "about":
            await self.show_about(callback_query.message)
        elif data == "exit":
            await self.cmd_exit(callback_query.message)

        await callback_query.answer()

    @staticmethod
    async def show_about(message: types.Message):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ (–û –±–æ—Ç–µ)"""
        about_text = (
            "Vineyard Assistant Bot (VAB)\n\n"
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞—Ä—Å—Ç–≤—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ AI –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
            "Version: 2.0\n"
            "Created by: Ceres Pro"
        )
        await message.answer(about_text)

    @staticmethod
    async def cmd_about_company(message: types.Message):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ä–∞–Ω–µ–µ –∫–æ–º–∞–Ω–¥–∞ /help)"""
        about_company_text = (
            "–ö–æ–º–ø–∞–Ω–∏—è Ceres Pro | –ú–µ—Ç–µ–æ—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–≥—Ä–æ—Ö–æ–∑—è–π—Å—Ç–≤\n"
            "Ceres Pro ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è, –∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–∏–Ω–æ–≥—Ä–∞–¥–Ω–∏–∫–∞.\n\n"
            "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Å–µ—Ä–≤–∏—Å, –≥–∞—Ä–∞–Ω—Ç–∏—è:\n"
            "–≥. –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å, —É–ª. –•—Ä—É—Å—Ç–∞–ª—ë–≤–∞, 74–ê\n\n"
            "+7 (978) 858-55-25\n"
            "info@proceres.ru\n"
            "@pro_ceres\n"
            "proceres.ru"
        )
        await message.answer(about_company_text)

    @staticmethod
    async def cmd_start(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–Ω—é)"""
        welcome_text = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–∞–≥—Ä–æ–Ω–æ–º –ø–æ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞—Ä—Å—Ç–≤—É –∫–æ–º–ø–∞–Ω–∏–∏ Ceres Pro.\n"
            "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤–∞–º –ø–æ–º–æ—á—å.\n\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu.\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit."
        )
        await message.answer(welcome_text)
        logger.info(f"User {message.from_user.id} started conversation")

    async def cmd_menu(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –º–µ–Ω—é"""
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:", reply_markup=self.get_main_keyboard())

    async def cmd_clear(self, message: types.Message):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        if self.assistant and hasattr(self.assistant, 'session_manager'):
            self.assistant.session_manager.sessions.pop(message.from_user.id, None)
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.")

    async def cmd_exit(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /exit –∏ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥'"""
        if self.assistant:
            self.assistant.session_manager.sessions.pop(message.from_user.id, None)
        farewell_text = (
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∞-–∞–≥—Ä–æ–Ω–æ–º–∞. –£–¥–∞—á–∏ –≤ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞—Ä—Å—Ç–≤–µ!\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
        )
        await message.answer(farewell_text)
        logger.info(f"User {message.from_user.id} ended conversation")

    async def get_cached_response(self, query: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –∫—ç—à–∞"""
        if query in self.cache:
            timestamp, response = self.cache[query]
            if (datetime.now() - timestamp).total_seconds() < 3600:
                return response
        return None

    async def cache_response(self, query: str, response: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫—ç—à"""
        self.cache[query] = (datetime.now(), response)

    async def handle_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info(f"Processing query: {message.text}")
        start_time = time.time()

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cached_response = await self.get_cached_response(message.text)
            if cached_response:
                await self.send_long_message(message, cached_response)
                processing_time = time.time() - start_time
                logger.info(
                    f"Cached query processed in {processing_time:.2f} seconds for user {message.from_user.id}"
                )
                return

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
            await self.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            assistant = await self.initialize_assistant()

            try:
                response = await assistant.process_query(message.text, message.from_user.id)
            except Exception as e:
                error_str = str(e)
                if "Rate limit reached" in error_str:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                    wait_time = "–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
                    if "try again in" in error_str:
                        time_str = error_str.split("try again in")[1].split('.')[0].strip()
                        wait_time = time_str

                    error_message = (
                        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º."
                    )
                    await message.answer(error_message)
                    logger.error(f"Rate limit exceeded for user {message.from_user.id}: {error_str}")
                    return
                elif "token limit" in error_str.lower():
                    await message.answer(
                        "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )
                    logger.error(f"Token limit exceeded for user {message.from_user.id}: {error_str}")
                    return
                else:
                    raise

            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            await self.cache_response(message.text, response)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.send_long_message(message, response)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_time = time.time() - start_time
            logger.info(f"Query processed in {processing_time:.2f} seconds for user {message.from_user.id}")

        except Exception as message_error:
            error_str = str(message_error)
            if "Rate limit reached" in error_str:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                wait_time = "–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
                if "try again in" in error_str:
                    time_str = error_str.split("try again in")[1].split('.')[0].strip()
                    wait_time = time_str

                error_message = (
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.\n"
                    "–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞."
                )
            else:
                error_message = (
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
                )
            await message.answer(error_message)
            logger.error(f"Error processing message from user {message.from_user.id}: {error_str}", exc_info=True)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.setup_signal_handlers()
            await self.setup_commands()
            logger.info('Bot started')
            await self.dp.start_polling(self.bot)
        except Exception as err:
            logger.error(f"Error starting bot: {str(err)}", exc_info=True)
        finally:
            await self.shutdown()


# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞
if __name__ == '__main__':
    vineyard_bot = VineyardBot()
    try:
        asyncio.run(vineyard_bot.start())
    except KeyboardInterrupt:
        logger.info("Received KeyboardInterrupt, shutting down...")
    except Exception as unexpected_error:
        logger.error(f"Unexpected error: {unexpected_error}")